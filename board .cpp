#include <list>
#include <tuple>
#include <cstdint>

using namespace std;
struct player{
    list<tuple<uint8_t,list<uint64_t>>> l_figures;
    uint64_t figures;
};

class Board {
    private:
        struct player player1;
        struct player player2;

        uint64_t mask_1right = 0b0000000000000000000000000000000000000000000000000000000000000000;
        uint64_t mask_1left  = 0b0000000000000000000000000000000000000000000000000000000000000000;
        uint64_t mask_1up    = 0b0000000000000000000000000000000000000000000000000000000000000000;
        uint64_t mask_1down  = 0b0000000000000000000000000000000000000000000000000000000000000000;

        uint64_t mask_2right = 0b0000000000000000000000000000000000000000000000000000000000000000;
        uint64_t mask_2left  = 0b0000000000000000000000000000000000000000000000000000000000000000;
        uint64_t mask_2up    = 0b0000000000000000000000000000000000000000000000000000000000000000;
        uint64_t mask_2down  = 0b0000000000000000000000000000000000000000000000000000000000000000;
        
        uint64_t mask_3right = 0b0000000000000000000000000000000000000000000000000000000000000000;
        uint64_t mask_3left  = 0b0000000000000000000000000000000000000000000000000000000000000000;
        uint64_t mask_3up    = 0b0000000000000000000000000000000000000000000000000000000000000000;
        uint64_t mask_3down  = 0b0000000000000000000000000000000000000000000000000000000000000000;

        uint64_t mask_4right = 0b0000000000000000000000000000000000000000000000000000000000000000;
        uint64_t mask_4left  = 0b0000000000000000000000000000000000000000000000000000000000000000;
        uint64_t mask_4up    = 0b0000000000000000000000000000000000000000000000000000000000000000;
        uint64_t mask_4down  = 0b0000000000000000000000000000000000000000000000000000000000000000;

        uint64_t mask_5right = 0b0000000000000000000000000000000000000000000000000000000000000000;
        uint64_t mask_5left  = 0b0000000000000000000000000000000000000000000000000000000000000000;
        uint64_t mask_5up    = 0b0000000000000000000000000000000000000000000000000000000000000000;
        uint64_t mask_5down  = 0b0000000000000000000000000000000000000000000000000000000000000000;

        uint64_t mask_6right = 0b0000000000000000000000000000000000000000000000000000000000000000;
        uint64_t mask_6left  = 0b0000000000000000000000000000000000000000000000000000000000000000;
        uint64_t mask_6up    = 0b0000000000000000000000000000000000000000000000000000000000000000;
        uint64_t mask_6down  = 0b0000000000000000000000000000000000000000000000000000000000000000;

        uint64_t mask_7right = 0b0000000000000000000000000000000000000000000000000000000000000000;
        uint64_t mask_7left  = 0b0000000000000000000000000000000000000000000000000000000000000000;
        uint64_t mask_7up    = 0b0000000000000000000000000000000000000000000000000000000000000000;
        uint64_t mask_7down  = 0b0000000000000000000000000000000000000000000000000000000000000000;

  
    public:
        Board() {
            // Initialize the board and players here
        }

        list<tuple<list<uint64_t>,list<uint64_t>>> move_generation() {
            // genrate moves
            // think about: return moves or make class attrinbutes
            return list<tuple<list<uint64_t>,list<uint64_t>>>();
        }

        void move(uint64_t from, uint64_t to) {
            // Implement the move logic here
        }

        void undo() {
            // Implement the undo logic here
        }

        tuple<uint64_t, uint64_t> pick_rand_move() {
            // Implement the random move picking logic here
            return make_tuple(0, 0); // Placeholder return value
        }

        void print_board() {
            // Implement the board printing logic here
            // ggf use colored strings
        }


};
