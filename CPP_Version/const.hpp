#pragma once
#include <cstdint>

// CONFIGURATION ---------------------------------------------------------------------------------------------------
constexpr int MAX_DEPTH = 8; // Maximum depth for the move generation
//------------------------------------------------------------------------------------------------------------------


namespace masks{
// MASKS -------------------------------------------------------------------------------------------------------------------
// TODO: set up the masks for the move calculation
// TODO: reorganize for the different dimensions for early stoppings
constexpr uint64_t MASK_1RIGHT = 0b0000000000000001111110111111011111101111110111111011111101111110;
constexpr uint64_t MASK_1LEFT  = 0b0000000000000000111111011111101111110111111011111101111110111111;
constexpr uint64_t MASK_1UP    = 0b0000000000000000000000111111111111111111111111111111111111111111;
constexpr uint64_t MASK_1DOWN  = 0b0000000000000001111111111111111111111111111111111111111110000000;
constexpr uint64_t MASK_2RIGHT = 0b0000000000000001111100111110011111001111100111110011111001111100;
constexpr uint64_t MASK_2LEFT  = 0b0000000000000000011111001111100111110011111001111100111110011111;
constexpr uint64_t MASK_2UP    = 0b0000000000000000000000000000011111111111111111111111111111111111;
constexpr uint64_t MASK_2DOWN  = 0b0000000000000001111111111111111111111111111111111100000000000000;
constexpr uint64_t MASK_3RIGHT = 0b0000000000000001111000111100011110001111000111100011110001111000;
constexpr uint64_t MASK_3LEFT  = 0b0000000000000000001111000111100011110001111000111100011110001111;
constexpr uint64_t MASK_3UP    = 0b0000000000000000000000000000000000000111111111111111111111111111;
constexpr uint64_t MASK_3DOWN  = 0b0000000000000001111111111111111111111111111000000000000000000000;
constexpr uint64_t MASK_4RIGHT = 0b0000000000000001110000111000011100001110000111000011100001110000;
constexpr uint64_t MASK_4LEFT  = 0b0000000000000000000111000011100001110000111000011100001110000111;
constexpr uint64_t MASK_4UP    = 0b0000000000000000000000000000000000000000000111111111111111111111;
constexpr uint64_t MASK_4DOWN  = 0b0000000000000001111111111111111111110000000000000000000000000000;
constexpr uint64_t MASK_5RIGHT = 0b0000000000000001100000110000011000001100000110000011000001100000;
constexpr uint64_t MASK_5LEFT  = 0b0000000000000000000011000001100000110000011000001100000110000011;
constexpr uint64_t MASK_5UP    = 0b0000000000000000000000000000000000000000000000000011111111111111;
constexpr uint64_t MASK_5DOWN  = 0b0000000000000001111111111111100000000000000000000000000000000000;
constexpr uint64_t MASK_6RIGHT = 0b0000000000000001000000100000010000001000000100000010000001000000;
constexpr uint64_t MASK_6LEFT  = 0b0000000000000000000001000000100000010000001000000100000010000001;
constexpr uint64_t MASK_6UP    = 0b0000000000000000000000000000000000000000000000000000000001111111;
constexpr uint64_t MASK_6DOWN  = 0b0000000000000001111111000000000000000000000000000000000000000000;


// MOVE MASKS --------------------------------------------------------------------------------------------------

constexpr std::uint64_t MASK_LEFT_MOVES[2][6] = {
    {MASK_1LEFT, MASK_2LEFT, MASK_3LEFT, MASK_4LEFT, MASK_5LEFT, MASK_6LEFT},
    {MASK_1UP, MASK_2UP, MASK_3UP, MASK_4UP, MASK_5UP, MASK_6UP}
};

constexpr std::uint64_t MASK_RIGHT_MOVES[2][6] = {
    {MASK_1RIGHT, MASK_2RIGHT, MASK_3RIGHT, MASK_4RIGHT, MASK_5RIGHT, MASK_6RIGHT},
    {MASK_1DOWN, MASK_2DOWN, MASK_3DOWN, MASK_4DOWN, MASK_5DOWN, MASK_6DOWN}
};

// SHIFT APPLICATION MASKS --------------------------------------------------------------------------------------------------
constexpr int SHIFT_1HORIZONTAL = 1;  // 1 horizontal 
constexpr int SHIFT_2HORIZONTAL = 2;  // 2 horizontal 
constexpr int SHIFT_3HORIZONTAL = 3;  // 3 horizontal 
constexpr int SHIFT_4HORIZONTAL = 4;  // 4 horizontal 
constexpr int SHIFT_5HORIZONTAL = 5;  // 5 horizontal 
constexpr int SHIFT_6HORIZONTAL = 6;  // 6 horizontal 
constexpr int SHIFT_1VERTICAL   = 7;  // 1 vertical 
constexpr int SHIFT_2VERTICAL   = 14; // 2 vertical 
constexpr int SHIFT_3VERTICAL   = 21; // 3 vertical 
constexpr int SHIFT_4VERTICAL   = 28; // 4 vertical 
constexpr int SHIFT_5VERTICAL   = 35; // 5 vertical 
constexpr int SHIFT_6VERTICAL   = 42; // 6 vertical 


constexpr int SHIFTS[2][6] = {
    {SHIFT_1HORIZONTAL, SHIFT_2HORIZONTAL, SHIFT_3HORIZONTAL, SHIFT_4HORIZONTAL, SHIFT_5HORIZONTAL, SHIFT_6HORIZONTAL},
    {SHIFT_1VERTICAL, SHIFT_2VERTICAL, SHIFT_3VERTICAL, SHIFT_4VERTICAL, SHIFT_5VERTICAL, SHIFT_6VERTICAL} 
};

//------------------------------------------------------------------------------------------------------------

// Meta information

constexpr uint64_t ONES = 0xFFFFFFFFFFFFFFFF; // 64 bits of ones

constexpr int TYPE_INDEX = 61;
constexpr int CAPTURE_INDEX = 58;
constexpr uint64_t CAPTURE_MASK = 7ULL << CAPTURE_INDEX;
constexpr std::uint64_t MASK_1 = 1ULL << TYPE_INDEX; 
constexpr std::uint64_t MASK_2 = 2ULL << TYPE_INDEX; 
constexpr std::uint64_t MASK_3 = 3ULL << TYPE_INDEX; 
constexpr std::uint64_t MASK_4 = 4ULL << TYPE_INDEX; 
constexpr std::uint64_t MASK_5 = 5ULL << TYPE_INDEX; 
constexpr std::uint64_t MASK_6 = 6ULL << TYPE_INDEX; 
constexpr std::uint64_t MASK_7 = 7ULL << TYPE_INDEX; 
constexpr std::uint64_t MASK_STACKHEIGHT = 7ULL << TYPE_INDEX; // TODO: how to handle guard?
constexpr std::uint64_t MASK_TYPE[7]={MASK_1, MASK_2, MASK_3, MASK_4, MASK_5, MASK_6, MASK_7};


// Positional Masks
// Home squares
constexpr uint64_t HOMESQUARE_B = 1ULL << 4;
constexpr uint64_t HOMESQUARE_R = 1ULL << 45;

// // Rows
// constexpr uint64_t ROW_1 = 0b0000000000000000000000000000000000000000000000000000000001111111;
// constexpr uint64_t ROW_2 = 0b0000000000000000000000000000000000000000000000000000000001111111 << SHIFT_1VERTICAL;
// constexpr uint64_t ROW_3 = 0b0000000000000000000000000000000000000000000000000000000001111111 << SHIFT_2VERTICAL;
// constexpr uint64_t ROW_4 = 0b0000000000000000000000000000000000000000000000000000000001111111 << SHIFT_3VERTICAL;
// constexpr uint64_t ROW_5 = 0b0000000000000000000000000000000000000000000000000000000001111111 << SHIFT_4VERTICAL;
// constexpr uint64_t ROW_6 = 0b0000000000000000000000000000000000000000000000000000000001111111 << SHIFT_5VERTICAL;
// constexpr uint64_t ROW_7 = 0b0000000000000000000000000000000000000000000000000000000001111111 << SHIFT_6VERTICAL;

// // Columns
// constexpr uint64_t COL_A = 0b0000000000000000000001000000100000010000001000000100000010000001;
// constexpr uint64_t COL_B = 0b0000000000000000000001000000100000010000001000000100000010000001 << SHIFT_1HORIZONTAL;
// constexpr uint64_t COL_C = 0b0000000000000000000001000000100000010000001000000100000010000001 << SHIFT_2HORIZONTAL;
// constexpr uint64_t COL_D = 0b0000000000000000000001000000100000010000001000000100000010000001 << SHIFT_3HORIZONTAL;
// constexpr uint64_t COL_E = 0b0000000000000000000001000000100000010000001000000100000010000001 << SHIFT_4HORIZONTAL;
// constexpr uint64_t COL_F = 0b0000000000000000000001000000100000010000001000000100000010000001 << SHIFT_5HORIZONTAL;
// constexpr uint64_t COL_G = 0b0000000000000000000001000000100000010000001000000100000010000001 << SHIFT_6HORIZONTAL;


}